{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "pip install statsmodels statsforecast scikit-learn"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Requirement already satisfied: statsmodels in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (0.13.5)\nRequirement already satisfied: statsforecast in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (2.0.1)\nRequirement already satisfied: scikit-learn in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (1.5.1)\nRequirement already satisfied: packaging>=21.3 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsmodels) (25.0)\nRequirement already satisfied: scipy>=1.3 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsmodels) (1.11.0)\nRequirement already satisfied: pandas>=0.25 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsmodels) (1.5.3)\nRequirement already satisfied: patsy>=0.5.2 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsmodels) (1.0.1)\nRequirement already satisfied: numpy>=1.17 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsmodels) (1.23.5)\nRequirement already satisfied: numba>=0.55.0 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsforecast) (0.56.4)\nRequirement already satisfied: tqdm in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsforecast) (4.67.1)\nRequirement already satisfied: fugue>=0.8.1 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsforecast) (0.9.1)\nRequirement already satisfied: utilsforecast>=0.1.4 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsforecast) (0.2.12)\nRequirement already satisfied: threadpoolctl>=3 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsforecast) (3.6.0)\nRequirement already satisfied: cloudpickle in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsforecast) (1.6.0)\nRequirement already satisfied: coreforecast>=0.0.12 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from statsforecast) (0.0.16)\nRequirement already satisfied: joblib>=1.2.0 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from scikit-learn) (1.2.0)\nRequirement already satisfied: triad>=0.9.7 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from fugue>=0.8.1->statsforecast) (0.9.8)\nRequirement already satisfied: adagio>=0.2.4 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from fugue>=0.8.1->statsforecast) (0.2.6)\nRequirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from numba>=0.55.0->statsforecast) (0.39.1)\nRequirement already satisfied: setuptools in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from numba>=0.55.0->statsforecast) (75.8.0)\nRequirement already satisfied: pytz>=2020.1 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from pandas>=0.25->statsmodels) (2022.5)\nRequirement already satisfied: python-dateutil>=2.8.1 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from pandas>=0.25->statsmodels) (2.9.0.post0)\nRequirement already satisfied: six>=1.5 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=0.25->statsmodels) (1.17.0)\nRequirement already satisfied: fs in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from triad>=0.9.7->fugue>=0.8.1->statsforecast) (2.4.16)\nRequirement already satisfied: fsspec>=2022.5.0 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from triad>=0.9.7->fugue>=0.8.1->statsforecast) (2023.10.0)\nRequirement already satisfied: pyarrow>=6.0.1 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from triad>=0.9.7->fugue>=0.8.1->statsforecast) (14.0.2)\nRequirement already satisfied: appdirs~=1.4.3 in /anaconda/envs/azureml_py38/lib/python3.10/site-packages (from fs->triad>=0.9.7->fugue>=0.8.1->statsforecast) (1.4.4)\nNote: you may need to restart the kernel to use updated packages.\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1751289750236
        }
      },
      "id": "bf724889-b8f1-40e3-b7c5-1a6fb49b194b"
    },
    {
      "cell_type": "code",
      "source": [
        "# import library\n",
        "import pandas as pd\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from itertools import product\n",
        "import warnings\n",
        "\n",
        "warnings.filterwarnings(\"ignore\") # Suppress warnings for cleaner output\n"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1751289754702
        }
      },
      "id": "1977f18b-9a39-4c24-98dc-90015c0e0dbd"
    },
    {
      "cell_type": "code",
      "source": [
        "# import data\n",
        "dom_df = pd.read_csv(\"../data/store4128combined.csv\",index_col=0)\n",
        "\n",
        "pd.set_option(\"display.max_columns\",None)\n",
        "pd.set_option(\"display.max_rows\",None)"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1751289754909
        }
      },
      "id": "95a46d8f-d0b1-4cd2-9547-5083e5910483"
    },
    {
      "cell_type": "code",
      "source": [
        "dom_df.head(5)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "  WeekStarting  dom_qty  mm_qty  trp_qty  dom_ad  mm_ad  trp_ad  dom_price  \\\n0   1990-06-14    18800   11269    11269       1      1       1       2.62   \n1   1990-06-21    19493   10512    10512       1      1       1       2.49   \n2   1990-06-28    13994   14028    14028       1      1       1       2.06   \n3   1990-07-05    19658   10129    10129       1      1       1       2.57   \n4   1990-07-12    19767   17728    17728       1      1       1       2.08   \n\n   mm_price  trp_price   dom_rev    mm_rev   trp_rev  dom_qty_lag_1  \\\n0      2.51       2.51  49256.00  28285.19  28285.19            NaN   \n1      1.91       1.91  48537.57  20077.92  20077.92        18800.0   \n2      2.55       2.55  28827.64  35771.40  35771.40        19493.0   \n3      2.11       2.11  50521.06  21372.19  21372.19        13994.0   \n4      1.94       1.94  41115.36  34392.32  34392.32        19658.0   \n\n   dom_qty_lag_2  dom_qty_lag_3  mm_qty_lag_1  mm_qty_lag_2  mm_qty_lag_3  \\\n0            NaN            NaN           NaN           NaN           NaN   \n1            NaN            NaN       11269.0           NaN           NaN   \n2        18800.0            NaN       10512.0       11269.0           NaN   \n3        19493.0        18800.0       14028.0       10512.0       11269.0   \n4        13994.0        19493.0       10129.0       14028.0       10512.0   \n\n   trp_qty_lag_1  trp_qty_lag_2  trp_qty_lag_3  dom_price_lag_1  \\\n0            NaN            NaN            NaN              NaN   \n1        11269.0            NaN            NaN             2.62   \n2        10512.0        11269.0            NaN             2.49   \n3        14028.0        10512.0        11269.0             2.06   \n4        10129.0        14028.0        10512.0             2.57   \n\n   dom_price_lag_2  dom_price_lag_3  mm_price_lag_1  mm_price_lag_2  \\\n0              NaN              NaN             NaN             NaN   \n1              NaN              NaN            2.51             NaN   \n2             2.62              NaN            1.91            2.51   \n3             2.49             2.62            2.55            1.91   \n4             2.06             2.49            2.11            2.55   \n\n   mm_price_lag_3  trp_price_lag_1  trp_price_lag_2  trp_price_lag_3  \\\n0             NaN              NaN              NaN              NaN   \n1             NaN             2.51              NaN              NaN   \n2             NaN             1.91             2.51              NaN   \n3            2.51             2.55             1.91             2.51   \n4            1.91             2.11             2.55             1.91   \n\n   dom_rev_lag_1  dom_rev_lag_2  dom_rev_lag_3  mm_rev_lag_1  mm_rev_lag_2  \\\n0            NaN            NaN            NaN           NaN           NaN   \n1       49256.00            NaN            NaN      28285.19           NaN   \n2       48537.57       49256.00            NaN      20077.92      28285.19   \n3       28827.64       48537.57       49256.00      35771.40      20077.92   \n4       50521.06       28827.64       48537.57      21372.19      35771.40   \n\n   mm_rev_lag_3  trp_rev_lag_1  trp_rev_lag_2  trp_rev_lag_3  \n0           NaN            NaN            NaN            NaN  \n1           NaN       28285.19            NaN            NaN  \n2           NaN       20077.92       28285.19            NaN  \n3      28285.19       35771.40       20077.92       28285.19  \n4      20077.92       21372.19       35771.40       20077.92  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>WeekStarting</th>\n      <th>dom_qty</th>\n      <th>mm_qty</th>\n      <th>trp_qty</th>\n      <th>dom_ad</th>\n      <th>mm_ad</th>\n      <th>trp_ad</th>\n      <th>dom_price</th>\n      <th>mm_price</th>\n      <th>trp_price</th>\n      <th>dom_rev</th>\n      <th>mm_rev</th>\n      <th>trp_rev</th>\n      <th>dom_qty_lag_1</th>\n      <th>dom_qty_lag_2</th>\n      <th>dom_qty_lag_3</th>\n      <th>mm_qty_lag_1</th>\n      <th>mm_qty_lag_2</th>\n      <th>mm_qty_lag_3</th>\n      <th>trp_qty_lag_1</th>\n      <th>trp_qty_lag_2</th>\n      <th>trp_qty_lag_3</th>\n      <th>dom_price_lag_1</th>\n      <th>dom_price_lag_2</th>\n      <th>dom_price_lag_3</th>\n      <th>mm_price_lag_1</th>\n      <th>mm_price_lag_2</th>\n      <th>mm_price_lag_3</th>\n      <th>trp_price_lag_1</th>\n      <th>trp_price_lag_2</th>\n      <th>trp_price_lag_3</th>\n      <th>dom_rev_lag_1</th>\n      <th>dom_rev_lag_2</th>\n      <th>dom_rev_lag_3</th>\n      <th>mm_rev_lag_1</th>\n      <th>mm_rev_lag_2</th>\n      <th>mm_rev_lag_3</th>\n      <th>trp_rev_lag_1</th>\n      <th>trp_rev_lag_2</th>\n      <th>trp_rev_lag_3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1990-06-14</td>\n      <td>18800</td>\n      <td>11269</td>\n      <td>11269</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.62</td>\n      <td>2.51</td>\n      <td>2.51</td>\n      <td>49256.00</td>\n      <td>28285.19</td>\n      <td>28285.19</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1990-06-21</td>\n      <td>19493</td>\n      <td>10512</td>\n      <td>10512</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.49</td>\n      <td>1.91</td>\n      <td>1.91</td>\n      <td>48537.57</td>\n      <td>20077.92</td>\n      <td>20077.92</td>\n      <td>18800.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>11269.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>11269.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.62</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.51</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.51</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>49256.00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>28285.19</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>28285.19</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1990-06-28</td>\n      <td>13994</td>\n      <td>14028</td>\n      <td>14028</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.06</td>\n      <td>2.55</td>\n      <td>2.55</td>\n      <td>28827.64</td>\n      <td>35771.40</td>\n      <td>35771.40</td>\n      <td>19493.0</td>\n      <td>18800.0</td>\n      <td>NaN</td>\n      <td>10512.0</td>\n      <td>11269.0</td>\n      <td>NaN</td>\n      <td>10512.0</td>\n      <td>11269.0</td>\n      <td>NaN</td>\n      <td>2.49</td>\n      <td>2.62</td>\n      <td>NaN</td>\n      <td>1.91</td>\n      <td>2.51</td>\n      <td>NaN</td>\n      <td>1.91</td>\n      <td>2.51</td>\n      <td>NaN</td>\n      <td>48537.57</td>\n      <td>49256.00</td>\n      <td>NaN</td>\n      <td>20077.92</td>\n      <td>28285.19</td>\n      <td>NaN</td>\n      <td>20077.92</td>\n      <td>28285.19</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1990-07-05</td>\n      <td>19658</td>\n      <td>10129</td>\n      <td>10129</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.57</td>\n      <td>2.11</td>\n      <td>2.11</td>\n      <td>50521.06</td>\n      <td>21372.19</td>\n      <td>21372.19</td>\n      <td>13994.0</td>\n      <td>19493.0</td>\n      <td>18800.0</td>\n      <td>14028.0</td>\n      <td>10512.0</td>\n      <td>11269.0</td>\n      <td>14028.0</td>\n      <td>10512.0</td>\n      <td>11269.0</td>\n      <td>2.06</td>\n      <td>2.49</td>\n      <td>2.62</td>\n      <td>2.55</td>\n      <td>1.91</td>\n      <td>2.51</td>\n      <td>2.55</td>\n      <td>1.91</td>\n      <td>2.51</td>\n      <td>28827.64</td>\n      <td>48537.57</td>\n      <td>49256.00</td>\n      <td>35771.40</td>\n      <td>20077.92</td>\n      <td>28285.19</td>\n      <td>35771.40</td>\n      <td>20077.92</td>\n      <td>28285.19</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1990-07-12</td>\n      <td>19767</td>\n      <td>17728</td>\n      <td>17728</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.08</td>\n      <td>1.94</td>\n      <td>1.94</td>\n      <td>41115.36</td>\n      <td>34392.32</td>\n      <td>34392.32</td>\n      <td>19658.0</td>\n      <td>13994.0</td>\n      <td>19493.0</td>\n      <td>10129.0</td>\n      <td>14028.0</td>\n      <td>10512.0</td>\n      <td>10129.0</td>\n      <td>14028.0</td>\n      <td>10512.0</td>\n      <td>2.57</td>\n      <td>2.06</td>\n      <td>2.49</td>\n      <td>2.11</td>\n      <td>2.55</td>\n      <td>1.91</td>\n      <td>2.11</td>\n      <td>2.55</td>\n      <td>1.91</td>\n      <td>50521.06</td>\n      <td>28827.64</td>\n      <td>48537.57</td>\n      <td>21372.19</td>\n      <td>35771.40</td>\n      <td>20077.92</td>\n      <td>21372.19</td>\n      <td>35771.40</td>\n      <td>20077.92</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1751289755258
        }
      },
      "id": "21542c99-3e35-46f7-81b7-f42900c04335"
    },
    {
      "cell_type": "code",
      "source": [
        "df = dom_df[[\"WeekStarting\",\"dom_qty\"]].copy()\n",
        "\n",
        "df[\"WeekStarting\"] = pd.to_datetime(df[\"WeekStarting\"])\n",
        "\n",
        "df = df.set_index(\"WeekStarting\")\n",
        "\n",
        "# Ensure the index is sorted chronologically\n",
        "df = df.sort_index()\n"
      ],
      "outputs": [],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1751289755516
        }
      },
      "id": "bc91efa3-83ea-4c88-8120-2088f1100f7f"
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 121 entries, 1990-06-14 to 1992-10-01\nData columns (total 1 columns):\n #   Column   Non-Null Count  Dtype\n---  ------   --------------  -----\n 0   dom_qty  121 non-null    int64\ndtypes: int64(1)\nmemory usage: 1.9 KB\n"
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1751289755725
        }
      },
      "id": "2e6241b0-7108-449f-aabf-15e634abe3cb"
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.head(5))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "              dom_qty\nWeekStarting         \n1990-06-14      18800\n1990-06-21      19493\n1990-06-28      13994\n1990-07-05      19658\n1990-07-12      19767\n"
        }
      ],
      "execution_count": 7,
      "metadata": {
        "scrolled": true,
        "gather": {
          "logged": 1751289755904
        }
      },
      "id": "abdba491-d1f2-4494-8ca2-0fef9fdecc54"
    },
    {
      "cell_type": "code",
      "source": [
        "print(df)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "              dom_qty\nWeekStarting         \n1990-06-14      18800\n1990-06-21      19493\n1990-06-28      13994\n1990-07-05      19658\n1990-07-12      19767\n1990-07-19      19466\n1990-07-26      15906\n1990-08-02      15934\n1990-08-09       9829\n1990-08-16      19315\n1990-08-23      16144\n1990-08-30      11456\n1990-09-06      12137\n1990-09-13      13024\n1990-09-20      12081\n1990-09-27      10651\n1990-10-04      13747\n1990-10-11      11478\n1990-10-18      19467\n1990-10-25      19041\n1990-11-01      16587\n1990-11-08      11246\n1990-11-15      15279\n1990-11-22      16591\n1990-11-29      12648\n1990-12-06      10277\n1990-12-13      10554\n1990-12-20       9155\n1990-12-27      15497\n1991-01-03      18074\n1991-01-10      14604\n1991-01-17      11833\n1991-01-24      12910\n1991-01-31      16341\n1991-02-07      17876\n1991-02-14      19109\n1991-02-21      14804\n1991-02-28      14475\n1991-03-07       9244\n1991-03-14      14700\n1991-03-21      18612\n1991-03-28      15060\n1991-04-04      18886\n1991-04-11      16759\n1991-04-18      19407\n1991-04-25      19122\n1991-05-02      17212\n1991-05-09      14253\n1991-05-16      14311\n1991-05-23      10977\n1991-05-30      11569\n1991-06-06       9460\n1991-06-13      13878\n1991-06-20       9393\n1991-06-27      17529\n1991-07-04      12649\n1991-07-11      13163\n1991-07-18      12975\n1991-07-25      10270\n1991-08-01      12582\n1991-08-08      18375\n1991-08-15      11935\n1991-08-22      12964\n1991-08-29      15746\n1991-09-05      11215\n1991-09-12      15282\n1991-09-19      12822\n1991-09-26      17638\n1991-10-03      19187\n1991-10-10      10576\n1991-10-17      11277\n1991-10-24      16909\n1991-10-31      10760\n1991-11-07      16246\n1991-11-14      15698\n1991-11-21      10016\n1991-11-28      17909\n1991-12-05      16368\n1991-12-12      13133\n1991-12-19      14019\n1991-12-26      10252\n1992-01-02      14028\n1992-01-09      19823\n1992-01-16       9248\n1992-01-23      19523\n1992-01-30       9270\n1992-02-06      10254\n1992-02-13      19223\n1992-02-20      11534\n1992-02-27      14373\n1992-03-05      17624\n1992-03-12      19000\n1992-03-19      15262\n1992-03-26      17371\n1992-04-02      18893\n1992-04-09      19134\n1992-04-16      19023\n1992-04-23      11139\n1992-04-30      19980\n1992-05-07      11773\n1992-05-14      17077\n1992-05-21      10912\n1992-05-28       9866\n1992-06-04      11050\n1992-06-11      17071\n1992-06-18      15472\n1992-06-25      12807\n1992-07-02      12782\n1992-07-09      11395\n1992-07-16      10108\n1992-07-23      13583\n1992-07-30      12867\n1992-08-06      15025\n1992-08-13      19059\n1992-08-20      11825\n1992-08-27      12767\n1992-09-03      15526\n1992-09-10      13112\n1992-09-17      17214\n1992-09-24      11032\n1992-10-01       9164\n"
        }
      ],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1751289756084
        }
      },
      "id": "c69585e1-b7fc-4c78-afc7-1024fbaef8a6"
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv(\"../data/dominickqty.csv\")"
      ],
      "outputs": [],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1751289756260
        }
      },
      "id": "0fb5e803-7a5f-46a6-8377-5910ed483217"
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# --- 2. Split Data into Training and Testing Sets ---\n",
        "# We'll use 80% for training and 20% for testing.\n",
        "train_size = int(len(df) * 0.7)\n",
        "train_data, test_data = df.iloc[0:train_size], df.iloc[train_size:]\n",
        "\n",
        "print(f\"Training data points: {len(train_data)}\")\n",
        "print(f\"Testing data points: {len(test_data)}\\n\")\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Training data points: 84\nTesting data points: 37\n\n"
        }
      ],
      "execution_count": 10,
      "metadata": {
        "gather": {
          "logged": 1751289756581
        }
      },
      "id": "b68010aa-a890-49e8-823d-15081597ff67"
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 3. Hyperparameter Tuning (Grid Search for ARIMA p, d, q) ---\n",
        "# Define the range for p, d, and q parameters\n",
        "p = d = q = range(0, 3) # Test values from 0 to 2 for each parameter\n",
        "pdq = list(product(p, d, q)) # Generate all possible combinations\n",
        "\n",
        "best_aic = float(\"inf\")\n",
        "best_order = None\n",
        "best_model_fit = None\n",
        "\n",
        "print(\"--- Starting ARIMA Hyperparameter Tuning ---\")\n",
        "# Iterate over all parameter combinations\n",
        "for order in pdq:\n",
        "    try:\n",
        "        # Initialize and fit ARIMA model\n",
        "        model = ARIMA(train_data['dom_qty'], order=order)\n",
        "        model_fit = model.fit()\n",
        "\n",
        "        # Check if current model's AIC is better than the best found so far\n",
        "        if model_fit.aic < best_aic:\n",
        "            best_aic = model_fit.aic\n",
        "            best_order = order\n",
        "            best_model_fit = model_fit\n",
        "        # print(f\"ARIMA{order} - AIC: {model_fit.aic:.2f}\") # Uncomment to see progress\n",
        "    except Exception as e:\n",
        "        # print(f\"ARIMA{order} - Error: {e}\") # Uncomment to see errors for specific orders\n",
        "        continue # Skip combinations that cause errors\n",
        "\n",
        "if best_order:\n",
        "    print(f\"\\n--- Best ARIMA Order Found: {best_order} with AIC: {best_aic:.2f} ---\\n\")\n",
        "else:\n",
        "    print(\"\\nNo best ARIMA order found through grid search. Falling back to (1,1,1).\\n\")\n",
        "    best_order = (1, 1, 1)\n",
        "    model = ARIMA(train_data['dom_qty'], order=best_order)\n",
        "    best_model_fit = model.fit()\n",
        "\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "--- Starting ARIMA Hyperparameter Tuning ---\n\n--- Best ARIMA Order Found: (0, 1, 2) with AIC: 1585.52 ---\n\n"
        }
      ],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1751289760296
        }
      },
      "id": "cdc0b884-a251-4a2b-95dc-7d101301226f"
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 4. Model Training (with Best Parameters) ---\n",
        "# The best_model_fit from the grid search is already the trained model.\n",
        "print(\"--- Model Training Complete ---\")\n",
        "print(best_model_fit.summary())\n",
        "print(\"\\n\")\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "--- Model Training Complete ---\n                               SARIMAX Results                                \n==============================================================================\nDep. Variable:                dom_qty   No. Observations:                   84\nModel:                 ARIMA(0, 1, 2)   Log Likelihood                -789.759\nDate:                Mon, 30 Jun 2025   AIC                           1585.518\nTime:                        13:22:39   BIC                           1592.774\nSample:                    06-14-1990   HQIC                          1588.433\n                         - 01-16-1992                                         \nCovariance Type:                  opg                                         \n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nma.L1         -0.7552      0.230     -3.279      0.001      -1.207      -0.304\nma.L2         -0.2443      0.118     -2.064      0.039      -0.476      -0.012\nsigma2      1.024e+07   2.34e-08   4.37e+14      0.000    1.02e+07    1.02e+07\n===================================================================================\nLjung-Box (L1) (Q):                   0.20   Jarque-Bera (JB):                 3.50\nProb(Q):                              0.66   Prob(JB):                         0.17\nHeteroskedasticity (H):               0.92   Skew:                             0.06\nProb(H) (two-sided):                  0.82   Kurtosis:                         2.00\n===================================================================================\n\nWarnings:\n[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n[2] Covariance matrix is singular or near-singular, with condition number    inf. Standard errors may be unstable.\n\n\n"
        }
      ],
      "execution_count": 12,
      "metadata": {
        "gather": {
          "logged": 1751289760563
        }
      },
      "id": "7d0b34dc-5cc4-45c7-a943-7fc5fc3a9071"
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 5. Forecast / Make Predictions ---\n",
        "# Determine the start and end indices for prediction\n",
        "start_index = len(train_data)\n",
        "end_index = len(df) - 1\n",
        "\n",
        "# Make predictions on the test set\n",
        "# `typ='levels'` ensures predictions are on the original scale of the data\n",
        "predictions = best_model_fit.predict(start=start_index, end=end_index, typ='levels')\n",
        "\n",
        "# Assign the index from the test_data to predictions for easier plotting\n",
        "predictions.index = test_data.index\n",
        "\n",
        "print(\"--- Forecasted Values (Head) ---\")\n",
        "print(predictions.head())\n",
        "print(\"\\n\")\n"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {
        "gather": {
          "logged": 1751289760740
        }
      },
      "id": "07ecf63c-7fc0-4c35-801e-9c2aa3a814f4"
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 6. Metrics Evaluation ---\n",
        "rmse = np.sqrt(mean_squared_error(test_data['dom_qty'], predictions))\n",
        "mae = mean_absolute_error(test_data['dom_qty'], predictions)\n",
        "\n",
        "# Calculate MAPE, handling potential division by zero\n",
        "def calculate_mape(y_true, y_pred):\n",
        "    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n",
        "\n",
        "mape = calculate_mape(test_data['dom_qty'], predictions)\n",
        "\n",
        "print(\"--- Model Evaluation Metrics ---\")\n",
        "print(f\"RMSE (Root Mean Squared Error): {rmse:.2f}\")\n",
        "print(f\"MAE (Mean Absolute Error): {mae:.2f}\")\n",
        "print(f\"MAPE (Mean Absolute Percentage Error): {mape:.2f}%\")\n",
        "print(\"\\n\")\n"
      ],
      "outputs": [],
      "execution_count": 14,
      "metadata": {
        "gather": {
          "logged": 1751289760920
        }
      },
      "id": "c623bc00-91ad-4047-97e3-33095855a9a0"
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# --- 7. Plotting the Metrics and Forecast ---\n",
        "\n",
        "# Plot 1: Actual vs. Predicted Values\n",
        "plt.figure(figsize=(14, 7))\n",
        "plt.plot(train_data['dom_qty'], label='Training Data', color='blue')\n",
        "plt.plot(test_data['dom_qty'], label='Actual Test Data', color='green', marker='o', linestyle='--')\n",
        "plt.plot(predictions, label='ARIMA Forecast', color='red', marker='x')\n",
        "plt.title(f'ARIMA ({best_order}) Model: Actual vs. Forecasted Quantity')\n",
        "plt.xlabel('Week Starting Date')\n",
        "plt.ylabel('Domestic Quantity (dom_qty)')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot 2: Evaluation Metrics Bar Chart\n",
        "metrics_names = ['RMSE', 'MAE', 'MAPE']\n",
        "metrics_values = [rmse, mae, mape]\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(metrics_names, metrics_values, color=['skyblue', 'lightcoral', 'lightgreen'])\n",
        "plt.title('ARIMA Model Performance Metrics')\n",
        "plt.ylabel('Value')\n",
        "for i, val in enumerate(metrics_values):\n",
        "    plt.text(i, val + (val*0.05), f'{val:.2f}', ha='center', va='bottom')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"\\n--- Forecasting Model Development Complete ---\")"
      ],
      "outputs": [],
      "execution_count": 15,
      "metadata": {
        "gather": {
          "logged": 1751289660143
        }
      },
      "id": "7a54212b-0eb7-4bd6-b6ac-de0b337eb438"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.10 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}